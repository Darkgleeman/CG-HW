cmake_minimum_required(VERSION 3.10)
project(project)

set(CMAKE_CXX_STANDARD 17)

find_package(OpenMP REQUIRED)
if(OpenMP_FOUND)
    message("Found OpenMP")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

if(MSVC)
    # Force to always compile with W4
    if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    endif()
else()
    set(CMAKE_BUILD_TYPE "Release")
    set(CMAKE_CXX_FLAGS_DEBUG   "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb")
    set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -DNDEBUG")
endif()

list(APPEND CMAKE_MODULE_PATH "/usr/local/lib/cmake/OpenVDB")
find_package(OpenVDB REQUIRED)

# set(INTEL true)

if(INTEL)
    add_definitions(-DINTEL)
    find_package(embree 3.13.2 REQUIRED)
endif()

include_directories(./code)
include_directories(./code/external/stb_image)
include_directories(./code/external/tiny_obj_loader)
include_directories(./code/utils)
include_directories(./code/geometry)
include_directories(./code/shape)
include_directories(./code/primitive)
include_directories(./code/spectrum)
include_directories(./code/scattering)
include_directories(./code/material)
include_directories(./code/integrator)
include_directories(./code/scene)
include_directories(./code/camera)
include_directories(./code/light)
include_directories(./code/sampler)
include_directories(./code/aggregate)
include_directories(./code/texture)
include_directories(./code/distribution)
include_directories(./code/medium)

add_subdirectory(code/external)
add_subdirectory(code/utils)
add_subdirectory(code/geometry)
add_subdirectory(code/shape)
add_subdirectory(code/primitive)
add_subdirectory(code/spectrum)
add_subdirectory(code/scattering)
add_subdirectory(code/material)
add_subdirectory(code/integrator)
add_subdirectory(code/scene)
add_subdirectory(code/camera)
add_subdirectory(code/light)
add_subdirectory(code/sampler)
add_subdirectory(code/aggregate)
add_subdirectory(code/texture)
add_subdirectory(code/distribution)
add_subdirectory(code/medium)

aux_source_directory(./code DIR_SRCS)
add_executable(project ${DIR_SRCS})

target_link_libraries(project stb_image)
target_link_libraries(project tiny_obj_loader)
target_link_libraries(project utils)
target_link_libraries(project geometry)
target_link_libraries(project shape)
target_link_libraries(project primitive)
target_link_libraries(project spectrum)
target_link_libraries(project scattering)
target_link_libraries(project material)
target_link_libraries(project integrator)
target_link_libraries(project scene)
target_link_libraries(project camera)
target_link_libraries(project light)
target_link_libraries(project sampler)
target_link_libraries(project aggregate)
target_link_libraries(project texture)
target_link_libraries(project distribution)
target_link_libraries(project medium)